#include "tfm/Funciones_Tfm.h"
#include "ros/ros.h"
#include "geometry_msgs/Twist.h"
#include <math.h>

using namespace std;
const double PI = 3.14159265359;

void move(double speed, double distance, bool isForward)
{
    ros::Publisher velocity_publisher;
    ros::NodeHandle n2;

    velocity_publisher = n2.advertise<geometry_msgs::Twist>("mobile_base/commands/velocity", 10);
    geometry_msgs::Twist vel_msg;
    //distance = speed * time
    
    //set a random linear velocity in the x-axis
    if(isForward)
        vel_msg.linear.x = abs(speed);
    else
        vel_msg.linear.x = -abs(speed);
    vel_msg.linear.y = 0;
    vel_msg.linear.z = 0;
    
    //set a random angular velocity in the y-axis
    vel_msg.angular.x = 0;
    vel_msg.angular.y = 0;
    vel_msg.angular.z = 0;
    
    //t0: current time
    double t0 = ros::Time::now().toSec();
    double current_distance = 0;
    ros::Rate loop_rate(100);
    do
    {
        velocity_publisher.publish(vel_msg);
        double t1 = ros::Time::now().toSec();
        current_distance = speed *(t1-t0);
        ros::spinOnce();
        loop_rate.sleep();        
    }while(current_distance < distance);
    
    vel_msg.linear.x = 0;
    velocity_publisher.publish(vel_msg);
}

void rotate(double angular_speed, double angle, bool clockwise)
{
    ros::Publisher velocity_publisher;
    ros::NodeHandle n2;

    velocity_publisher = n2.advertise<geometry_msgs::Twist>("mobile_base/commands/velocity", 10);
        geometry_msgs::Twist vel_msg;
    //set a random linear velocity in the x-axis
    vel_msg.linear.x = 0;
    vel_msg.linear.y = 0;
    vel_msg.linear.z = 0;
    //set a random angular velocity in the y-axis
    vel_msg.angular.x = 0;
    vel_msg.angular.y = 0;
    
    if(clockwise)
        vel_msg.angular.z = -abs(angular_speed);
    else
        vel_msg.angular.z = abs(angular_speed);
    
    double current_angle = 0.0;
    double t0 = ros::Time::now().toSec();
    ros::Rate loop_rate(100);
    
    do
    {
    velocity_publisher.publish(vel_msg);
    double t1 = ros::Time::now().toSec();
    current_angle = angular_speed * (t1 -t0);
    ros::spinOnce();
    loop_rate.sleep();
    }
    while(current_angle<angle);

    vel_msg.angular.z = 0;
    velocity_publisher.publish(vel_msg);  
}

double degrees2radians(double angle_in_degrees)
{
    return angle_in_degrees * PI / 180.0;
}

double getDistance(double x1, double y1, double x2, double y2)
{
    return sqrt(pow((x1-x2),2)+pow((y1-y2),2));
}

void localization()
{
	//cout << "ME MUEVO" << endl;
	move(0.1, 0.3, 0);
	//cout << "GIRO"<< endl;
	rotate(0.5, 4*PI, 1);
}

